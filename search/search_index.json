{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>Mermaid nao funcionando! '''mermaid flowchart LR     ETL[Pipeline]         A[M\u00faltiplos arquivos Excel] --&gt; B[Extract: extract_data_from_excel]         B --&gt; |Gera uma lista de DataFrames| C[Transformation: concat_dataframes]         C --&gt; |Gera um DataFrame consolidado| D[Load: Converte para Excel]         D --&gt; |Salva o DataFrame consolidado em Excel| E[Output: Um \u00fanico arquivo Excel]     end</p> <p>'''</p>"},{"location":"#funcao-de-extracao","title":"Fun\u00e7\u00e3o de Extra\u00e7\u00e3o","text":"<p>Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de DataFrames.</p> <p>args: input_path (str): caminho da pasta com os arquivos</p> <p>return: lista de dataframes</p> Source code in <code>app/pipeline/extract.py</code> <pre><code>def extract_data_from_excel(path: str) -&gt; List[pd.DataFrame]:   # type: ignore\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de DataFrames.\n\n    args: input_path (str): caminho da pasta com os arquivos\n\n    return: lista de dataframes\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n\n    df_list = []\n    for file in all_files:\n        df_list.append(pd.read_excel(file))\n\n    return df_list\n</code></pre>"},{"location":"#funcao-de-transformacao","title":"Fun\u00e7\u00e3o de Transforma\u00e7\u00e3o","text":"<p>Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um \u00fanico DataFrame.</p> <p>args: dataframes_list(List[pd.DataFrame])</p> <p>return: DataFrame</p> Source code in <code>app/pipeline/transform.py</code> <pre><code>def concat_dataframes(dataframes_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um \u00fanico DataFrame.\n\n    args:\n    dataframes_list(List[pd.DataFrame])\n\n    return: DataFrame\n    \"\"\"\n    return pd.concat(dataframes_list, ignore_index=True)\n</code></pre>"},{"location":"#funcao-de-load","title":"Fun\u00e7\u00e3o de Load","text":"<p>Receber um DataFrame e salvar como um Excel.</p> <p>args: data_frame(str): DataFrame a ser salvo como excel output_path(str): Caminho onde o arquivo ser\u00e1 salvo file_name(str): Nome do arquivo Excel</p> <p>return: \"Arquivo salvo com sucesso\"</p> Source code in <code>app/pipeline/load.py</code> <pre><code>def load_excel(\n    data_frame: pd.DataFrame, output_path: str, file_name: str\n) -&gt; str:\n    \"\"\"\n    Receber um DataFrame e salvar como um Excel.\n\n    args:\n    data_frame(str): DataFrame a ser salvo como excel\n    output_path(str): Caminho onde o arquivo ser\u00e1 salvo\n    file_name(str): Nome do arquivo Excel\n\n    return: \"Arquivo salvo com sucesso\"\n    \"\"\"\n    if not os.path.exists(output_path):\n        os.mkdir(output_path)\n\n    data_frame.to_excel(f'{output_path}/{file_name}.xlsx', index=False)\n\n    return 'Arquivo salvo com sucesso'\n</code></pre>"}]}