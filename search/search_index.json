{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>'''mermaid flowchart LR     ETL[Pipeline]         A[M\u00faltiplos arquivos Excel] --&gt; B[Extract: extract_data_from_excel]         B --&gt; |Gera uma lista de DataFrames| C[Transformation: concat_dataframes]         C --&gt; |Gera um DataFrame consolidado| D[Load: Converte para Excel]         D --&gt; |Salva o DataFrame consolidado em Excel| E[Output: Um \u00fanico arquivo Excel]     end</p> <p>'''</p>"},{"location":"#funcao-de-extracao","title":"Fun\u00e7\u00e3o de Extra\u00e7\u00e3o","text":"<p>Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de DataFrames.</p> <p>args: input_path (str): caminho da pasta com os arquivos</p> <p>return: lista de dataframes</p> Source code in <code>app/pipeline/extract.py</code> <pre><code>def extract_data_from_excel(path: str) -&gt; List[pd.DataFrame]:   # type: ignore\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de DataFrames.\n\n    args: input_path (str): caminho da pasta com os arquivos\n\n    return: lista de dataframes\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n\n    df_list = []\n    for file in all_files:\n        df_list.append(pd.read_excel(file))\n\n    return df_list\n</code></pre>"}]}